"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
  fullName: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  book: Livro
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorAggregator {
  count: Int
  totalCount: Int
}

type AuthorGroupBy {
  id: [AuthorConnectionId]
  created_at: [AuthorConnectionCreated_at]
  updated_at: [AuthorConnectionUpdated_at]
  name: [AuthorConnectionName]
  book: [AuthorConnectionBook]
}

type AuthorConnectionId {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionCreated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionUpdated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionName {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionBook {
  key: ID
  connection: AuthorConnection
}

input AuthorInput {
  name: String
  book: ID
  created_by: ID
  updated_by: ID
}

input editAuthorInput {
  name: String
  book: ID
  created_by: ID
  updated_by: ID
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

type BannerHero {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  url: String!
}

type BannerHeroConnection {
  values: [BannerHero]
  groupBy: BannerHeroGroupBy
  aggregate: BannerHeroAggregator
}

type BannerHeroAggregator {
  count: Int
  totalCount: Int
}

type BannerHeroGroupBy {
  id: [BannerHeroConnectionId]
  created_at: [BannerHeroConnectionCreated_at]
  updated_at: [BannerHeroConnectionUpdated_at]
  image: [BannerHeroConnectionImage]
  url: [BannerHeroConnectionUrl]
}

type BannerHeroConnectionId {
  key: ID
  connection: BannerHeroConnection
}

type BannerHeroConnectionCreated_at {
  key: DateTime
  connection: BannerHeroConnection
}

type BannerHeroConnectionUpdated_at {
  key: DateTime
  connection: BannerHeroConnection
}

type BannerHeroConnectionImage {
  key: ID
  connection: BannerHeroConnection
}

type BannerHeroConnectionUrl {
  key: String
  connection: BannerHeroConnection
}

input BannerHeroInput {
  image: ID
  url: String!
  created_by: ID
  updated_by: ID
}

input editBannerHeroInput {
  image: ID
  url: String
  created_by: ID
  updated_by: ID
}

input createBannerHeroInput {
  data: BannerHeroInput
}

type createBannerHeroPayload {
  bannerHero: BannerHero
}

input updateBannerHeroInput {
  where: InputID
  data: editBannerHeroInput
}

type updateBannerHeroPayload {
  bannerHero: BannerHero
}

input deleteBannerHeroInput {
  where: InputID
}

type deleteBannerHeroPayload {
  bannerHero: BannerHero
}

type Cabecalho {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input CabecalhoInput {
  created_by: ID
  updated_by: ID
}

input editCabecalhoInput {
  created_by: ID
  updated_by: ID
}

input updateCabecalhoInput {
  data: editCabecalhoInput
}

type updateCabecalhoPayload {
  cabecalho: Cabecalho
}

type deleteCabecalhoPayload {
  cabecalho: Cabecalho
}

type CartasDeCristo {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  books: ComponentCartasBooks
  quote: String
  download: [ComponentCartasDownloadsGroup]
}

input CartasDeCristoInput {
  books: ComponentCartasBookInput
  quote: String
  download: [ComponentCartasDownloadsGroupInput]
  created_by: ID
  updated_by: ID
}

input editCartasDeCristoInput {
  books: editComponentCartasBookInput
  quote: String
  download: [editComponentCartasDownloadsGroupInput]
  created_by: ID
  updated_by: ID
}

input updateCartasDeCristoInput {
  data: editCartasDeCristoInput
}

type updateCartasDeCristoPayload {
  cartasDeCristo: CartasDeCristo
}

type deleteCartasDeCristoPayload {
  cartasDeCristo: CartasDeCristo
}

type Categorias {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  livros(sort: String, limit: Int, start: Int, where: JSON): [Livro!]!
}

type CategoriasConnection {
  values: [Categorias]
  groupBy: CategoriasGroupBy
  aggregate: CategoriasAggregator
}

type CategoriasAggregator {
  count: Int
  totalCount: Int
}

type CategoriasGroupBy {
  id: [CategoriasConnectionId]
  created_at: [CategoriasConnectionCreated_at]
  updated_at: [CategoriasConnectionUpdated_at]
  name: [CategoriasConnectionName]
  slug: [CategoriasConnectionSlug]
}

type CategoriasConnectionId {
  key: ID
  connection: CategoriasConnection
}

type CategoriasConnectionCreated_at {
  key: DateTime
  connection: CategoriasConnection
}

type CategoriasConnectionUpdated_at {
  key: DateTime
  connection: CategoriasConnection
}

type CategoriasConnectionName {
  key: String
  connection: CategoriasConnection
}

type CategoriasConnectionSlug {
  key: String
  connection: CategoriasConnection
}

input CategoriaInput {
  name: String!
  slug: String!
  livros: [ID]
  created_by: ID
  updated_by: ID
}

input editCategoriaInput {
  name: String
  slug: String
  livros: [ID]
  created_by: ID
  updated_by: ID
}

input createCategoriaInput {
  data: CategoriaInput
}

type createCategoriaPayload {
  categoria: Categorias
}

input updateCategoriaInput {
  where: InputID
  data: editCategoriaInput
}

type updateCategoriaPayload {
  categoria: Categorias
}

input deleteCategoriaInput {
  where: InputID
}

type deleteCategoriaPayload {
  categoria: Categorias
}

type Contact {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  email: String!
  subject: String!
  message: String!
}

type ContactConnection {
  values: [Contact]
  groupBy: ContactGroupBy
  aggregate: ContactAggregator
}

type ContactAggregator {
  count: Int
  totalCount: Int
}

type ContactGroupBy {
  id: [ContactConnectionId]
  created_at: [ContactConnectionCreated_at]
  updated_at: [ContactConnectionUpdated_at]
  name: [ContactConnectionName]
  email: [ContactConnectionEmail]
  subject: [ContactConnectionSubject]
  message: [ContactConnectionMessage]
}

type ContactConnectionId {
  key: ID
  connection: ContactConnection
}

type ContactConnectionCreated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionUpdated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionName {
  key: String
  connection: ContactConnection
}

type ContactConnectionEmail {
  key: String
  connection: ContactConnection
}

type ContactConnectionSubject {
  key: String
  connection: ContactConnection
}

type ContactConnectionMessage {
  key: String
  connection: ContactConnection
}

input ContactInput {
  name: String!
  email: String!
  subject: String!
  message: String!
  created_by: ID
  updated_by: ID
}

input editContactInput {
  name: String
  email: String
  subject: String
  message: String
  created_by: ID
  updated_by: ID
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

type Disccount {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  book: Livro
  percentage: Int!
  minQuantity: Int
}

type DisccountConnection {
  values: [Disccount]
  groupBy: DisccountGroupBy
  aggregate: DisccountAggregator
}

type DisccountAggregator {
  count: Int
  totalCount: Int
  sum: DisccountAggregatorSum
  avg: DisccountAggregatorAvg
  min: DisccountAggregatorMin
  max: DisccountAggregatorMax
}

type DisccountAggregatorSum {
  percentage: Float
  minQuantity: Float
}

type DisccountAggregatorAvg {
  percentage: Float
  minQuantity: Float
}

type DisccountAggregatorMin {
  percentage: Float
  minQuantity: Float
}

type DisccountAggregatorMax {
  percentage: Float
  minQuantity: Float
}

type DisccountGroupBy {
  id: [DisccountConnectionId]
  created_at: [DisccountConnectionCreated_at]
  updated_at: [DisccountConnectionUpdated_at]
  book: [DisccountConnectionBook]
  percentage: [DisccountConnectionPercentage]
  minQuantity: [DisccountConnectionMinQuantity]
}

type DisccountConnectionId {
  key: ID
  connection: DisccountConnection
}

type DisccountConnectionCreated_at {
  key: DateTime
  connection: DisccountConnection
}

type DisccountConnectionUpdated_at {
  key: DateTime
  connection: DisccountConnection
}

type DisccountConnectionBook {
  key: ID
  connection: DisccountConnection
}

type DisccountConnectionPercentage {
  key: Int
  connection: DisccountConnection
}

type DisccountConnectionMinQuantity {
  key: Int
  connection: DisccountConnection
}

input DisccountInput {
  book: ID
  percentage: Int!
  minQuantity: Int
  created_by: ID
  updated_by: ID
}

input editDisccountInput {
  book: ID
  percentage: Int
  minQuantity: Int
  created_by: ID
  updated_by: ID
}

input createDisccountInput {
  data: DisccountInput
}

type createDisccountPayload {
  disccount: Disccount
}

input updateDisccountInput {
  where: InputID
  data: editDisccountInput
}

type updateDisccountPayload {
  disccount: Disccount
}

input deleteDisccountInput {
  where: InputID
}

type deleteDisccountPayload {
  disccount: Disccount
}

type Download {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  times: Int
  file(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
}

type DownloadConnection {
  values: [Download]
  groupBy: DownloadGroupBy
  aggregate: DownloadAggregator
}

type DownloadAggregator {
  count: Int
  totalCount: Int
  sum: DownloadAggregatorSum
  avg: DownloadAggregatorAvg
  min: DownloadAggregatorMin
  max: DownloadAggregatorMax
}

type DownloadAggregatorSum {
  times: Float
}

type DownloadAggregatorAvg {
  times: Float
}

type DownloadAggregatorMin {
  times: Float
}

type DownloadAggregatorMax {
  times: Float
}

type DownloadGroupBy {
  id: [DownloadConnectionId]
  created_at: [DownloadConnectionCreated_at]
  updated_at: [DownloadConnectionUpdated_at]
  name: [DownloadConnectionName]
  times: [DownloadConnectionTimes]
}

type DownloadConnectionId {
  key: ID
  connection: DownloadConnection
}

type DownloadConnectionCreated_at {
  key: DateTime
  connection: DownloadConnection
}

type DownloadConnectionUpdated_at {
  key: DateTime
  connection: DownloadConnection
}

type DownloadConnectionName {
  key: String
  connection: DownloadConnection
}

type DownloadConnectionTimes {
  key: Int
  connection: DownloadConnection
}

input DownloadInput {
  name: String
  file: [ID]
  times: Int
  created_by: ID
  updated_by: ID
}

input editDownloadInput {
  name: String
  file: [ID]
  times: Int
  created_by: ID
  updated_by: ID
}

input createDownloadInput {
  data: DownloadInput
}

type createDownloadPayload {
  download: Download
}

input updateDownloadInput {
  where: InputID
  data: editDownloadInput
}

type updateDownloadPayload {
  download: Download
}

input deleteDownloadInput {
  where: InputID
}

type deleteDownloadPayload {
  download: Download
}

type Home {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  productGroup: [ComponentHomeProductGroup]
  banner: [ComponentHomeBanner]
}

input HomeInput {
  productGroup: [ComponentHomeProductGroupInput!]
  banner: [ComponentHomeBannerInput]
  created_by: ID
  updated_by: ID
}

input editHomeInput {
  productGroup: [editComponentHomeProductGroupInput]
  banner: [editComponentHomeBannerInput]
  created_by: ID
  updated_by: ID
}

input updateHomeInput {
  data: editHomeInput
}

type updateHomePayload {
  home: Home
}

type deleteHomePayload {
  home: Home
}

type Livro {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  description: String!
  particulars: String
  price: Float!
  stock: Int!
  dimensions: ComponentProductDimensions
  active: Boolean
  promoPrice: Float
  sku: String
  gtin: String
  ncm: String
  seoDescription: String
  wishlist: Wishlist
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
  categorias(sort: String, limit: Int, start: Int, where: JSON): [Categorias!]!
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author!]!
  disccounts(sort: String, limit: Int, start: Int, where: JSON): [Disccount!]!
}

type LivroConnection {
  values: [Livro]
  groupBy: LivroGroupBy
  aggregate: LivroAggregator
}

type LivroAggregator {
  count: Int
  totalCount: Int
  sum: LivroAggregatorSum
  avg: LivroAggregatorAvg
  min: LivroAggregatorMin
  max: LivroAggregatorMax
}

type LivroAggregatorSum {
  price: Float
  stock: Float
  promoPrice: Float
}

type LivroAggregatorAvg {
  price: Float
  stock: Float
  promoPrice: Float
}

type LivroAggregatorMin {
  price: Float
  stock: Float
  promoPrice: Float
}

type LivroAggregatorMax {
  price: Float
  stock: Float
  promoPrice: Float
}

type LivroGroupBy {
  id: [LivroConnectionId]
  created_at: [LivroConnectionCreated_at]
  updated_at: [LivroConnectionUpdated_at]
  name: [LivroConnectionName]
  slug: [LivroConnectionSlug]
  description: [LivroConnectionDescription]
  particulars: [LivroConnectionParticulars]
  price: [LivroConnectionPrice]
  stock: [LivroConnectionStock]
  dimensions: [LivroConnectionDimensions]
  active: [LivroConnectionActive]
  promoPrice: [LivroConnectionPromoPrice]
  sku: [LivroConnectionSku]
  gtin: [LivroConnectionGtin]
  ncm: [LivroConnectionNcm]
  seoDescription: [LivroConnectionSeoDescription]
  wishlist: [LivroConnectionWishlist]
}

type LivroConnectionId {
  key: ID
  connection: LivroConnection
}

type LivroConnectionCreated_at {
  key: DateTime
  connection: LivroConnection
}

type LivroConnectionUpdated_at {
  key: DateTime
  connection: LivroConnection
}

type LivroConnectionName {
  key: String
  connection: LivroConnection
}

type LivroConnectionSlug {
  key: String
  connection: LivroConnection
}

type LivroConnectionDescription {
  key: String
  connection: LivroConnection
}

type LivroConnectionParticulars {
  key: String
  connection: LivroConnection
}

type LivroConnectionPrice {
  key: Float
  connection: LivroConnection
}

type LivroConnectionStock {
  key: Int
  connection: LivroConnection
}

type LivroConnectionDimensions {
  key: ID
  connection: LivroConnection
}

type LivroConnectionActive {
  key: Boolean
  connection: LivroConnection
}

type LivroConnectionPromoPrice {
  key: Float
  connection: LivroConnection
}

type LivroConnectionSku {
  key: String
  connection: LivroConnection
}

type LivroConnectionGtin {
  key: String
  connection: LivroConnection
}

type LivroConnectionNcm {
  key: String
  connection: LivroConnection
}

type LivroConnectionSeoDescription {
  key: String
  connection: LivroConnection
}

type LivroConnectionWishlist {
  key: ID
  connection: LivroConnection
}

input LivroInput {
  name: String!
  slug: String!
  description: String!
  particulars: String
  price: Float
  image: [ID]
  categorias: [ID]
  stock: Int
  dimensions: ComponentProductDimensionInput
  active: Boolean
  promoPrice: Float
  sku: String
  gtin: String
  ncm: String
  seoDescription: String
  authors: [ID]
  wishlist: ID
  disccounts: [ID]
  created_by: ID
  updated_by: ID
}

input editLivroInput {
  name: String
  slug: String
  description: String
  particulars: String
  price: Float
  image: [ID]
  categorias: [ID]
  stock: Int
  dimensions: editComponentProductDimensionInput
  active: Boolean
  promoPrice: Float
  sku: String
  gtin: String
  ncm: String
  seoDescription: String
  authors: [ID]
  wishlist: ID
  disccounts: [ID]
  created_by: ID
  updated_by: ID
}

input createLivroInput {
  data: LivroInput
}

type createLivroPayload {
  livro: Livro
}

input updateLivroInput {
  where: InputID
  data: editLivroInput
}

type updateLivroPayload {
  livro: Livro
}

input deleteLivroInput {
  where: InputID
}

type deleteLivroPayload {
  livro: Livro
}

union MenuBodyDynamicZone = ComponentMenuLink | ComponentMenuDropdown

"""Input type for dynamic zone body of Menu"""
scalar MenuBodyDynamicZoneInput

type Menu {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  body: [MenuBodyDynamicZone]
}

type MenuConnection {
  values: [Menu]
  groupBy: MenuGroupBy
  aggregate: MenuAggregator
}

type MenuAggregator {
  count: Int
  totalCount: Int
}

type MenuGroupBy {
  id: [MenuConnectionId]
  created_at: [MenuConnectionCreated_at]
  updated_at: [MenuConnectionUpdated_at]
  name: [MenuConnectionName]
  slug: [MenuConnectionSlug]
}

type MenuConnectionId {
  key: ID
  connection: MenuConnection
}

type MenuConnectionCreated_at {
  key: DateTime
  connection: MenuConnection
}

type MenuConnectionUpdated_at {
  key: DateTime
  connection: MenuConnection
}

type MenuConnectionName {
  key: String
  connection: MenuConnection
}

type MenuConnectionSlug {
  key: String
  connection: MenuConnection
}

input MenuInput {
  name: String
  slug: String
  body: [MenuBodyDynamicZoneInput!]
  created_by: ID
  updated_by: ID
}

input editMenuInput {
  name: String
  slug: String
  body: [MenuBodyDynamicZoneInput!]
  created_by: ID
  updated_by: ID
}

input createMenuInput {
  data: MenuInput
}

type createMenuPayload {
  menu: Menu
}

input updateMenuInput {
  where: InputID
  data: editMenuInput
}

type updateMenuPayload {
  menu: Menu
}

input deleteMenuInput {
  where: InputID
}

type deleteMenuPayload {
  menu: Menu
}

type Newsletter {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  email: String!
  name: String!
}

type NewsletterConnection {
  values: [Newsletter]
  groupBy: NewsletterGroupBy
  aggregate: NewsletterAggregator
}

type NewsletterAggregator {
  count: Int
  totalCount: Int
}

type NewsletterGroupBy {
  id: [NewsletterConnectionId]
  created_at: [NewsletterConnectionCreated_at]
  updated_at: [NewsletterConnectionUpdated_at]
  email: [NewsletterConnectionEmail]
  name: [NewsletterConnectionName]
}

type NewsletterConnectionId {
  key: ID
  connection: NewsletterConnection
}

type NewsletterConnectionCreated_at {
  key: DateTime
  connection: NewsletterConnection
}

type NewsletterConnectionUpdated_at {
  key: DateTime
  connection: NewsletterConnection
}

type NewsletterConnectionEmail {
  key: String
  connection: NewsletterConnection
}

type NewsletterConnectionName {
  key: String
  connection: NewsletterConnection
}

input NewsletterInput {
  email: String!
  name: String!
  created_by: ID
  updated_by: ID
}

input editNewsletterInput {
  email: String
  name: String
  created_by: ID
  updated_by: ID
}

input createNewsletterInput {
  data: NewsletterInput
}

type createNewsletterPayload {
  newsletter: Newsletter
}

input updateNewsletterInput {
  where: InputID
  data: editNewsletterInput
}

type updateNewsletterPayload {
  newsletter: Newsletter
}

input deleteNewsletterInput {
  where: InputID
}

type deleteNewsletterPayload {
  newsletter: Newsletter
}

type OrderStatus {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
}

type OrderStatusConnection {
  values: [OrderStatus]
  groupBy: OrderStatusGroupBy
  aggregate: OrderStatusAggregator
}

type OrderStatusAggregator {
  count: Int
  totalCount: Int
}

type OrderStatusGroupBy {
  id: [OrderStatusConnectionId]
  created_at: [OrderStatusConnectionCreated_at]
  updated_at: [OrderStatusConnectionUpdated_at]
  name: [OrderStatusConnectionName]
}

type OrderStatusConnectionId {
  key: ID
  connection: OrderStatusConnection
}

type OrderStatusConnectionCreated_at {
  key: DateTime
  connection: OrderStatusConnection
}

type OrderStatusConnectionUpdated_at {
  key: DateTime
  connection: OrderStatusConnection
}

type OrderStatusConnectionName {
  key: String
  connection: OrderStatusConnection
}

input OrderStatusInput {
  name: String
  created_by: ID
  updated_by: ID
}

input editOrderStatusInput {
  name: String
  created_by: ID
  updated_by: ID
}

input createOrderStatusInput {
  data: OrderStatusInput
}

type createOrderStatusPayload {
  orderStatus: OrderStatus
}

input updateOrderStatusInput {
  where: InputID
  data: editOrderStatusInput
}

type updateOrderStatusPayload {
  orderStatus: OrderStatus
}

input deleteOrderStatusInput {
  where: InputID
}

type deleteOrderStatusPayload {
  orderStatus: OrderStatus
}

type Order {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  comments: String
  books: [ComponentOrderOrderProduct]
  totalInCents: Int
  shipping: ComponentOrderShippingAddress
  status: OrderStatus
  payment: ComponentOrderPayment
}

type OrderConnection {
  values: [Order]
  groupBy: OrderGroupBy
  aggregate: OrderAggregator
}

type OrderAggregator {
  count: Int
  totalCount: Int
  sum: OrderAggregatorSum
  avg: OrderAggregatorAvg
  min: OrderAggregatorMin
  max: OrderAggregatorMax
}

type OrderAggregatorSum {
  totalInCents: Float
}

type OrderAggregatorAvg {
  totalInCents: Float
}

type OrderAggregatorMin {
  totalInCents: Float
}

type OrderAggregatorMax {
  totalInCents: Float
}

type OrderGroupBy {
  id: [OrderConnectionId]
  created_at: [OrderConnectionCreated_at]
  updated_at: [OrderConnectionUpdated_at]
  user: [OrderConnectionUser]
  comments: [OrderConnectionComments]
  totalInCents: [OrderConnectionTotalInCents]
  shipping: [OrderConnectionShipping]
  status: [OrderConnectionStatus]
  payment: [OrderConnectionPayment]
}

type OrderConnectionId {
  key: ID
  connection: OrderConnection
}

type OrderConnectionCreated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUpdated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUser {
  key: ID
  connection: OrderConnection
}

type OrderConnectionComments {
  key: String
  connection: OrderConnection
}

type OrderConnectionTotalInCents {
  key: Int
  connection: OrderConnection
}

type OrderConnectionShipping {
  key: ID
  connection: OrderConnection
}

type OrderConnectionStatus {
  key: ID
  connection: OrderConnection
}

type OrderConnectionPayment {
  key: ID
  connection: OrderConnection
}

input OrderInput {
  user: ID
  comments: String
  books: [ComponentOrderOrderProductInput]
  totalInCents: Int
  shipping: ComponentOrderShippingAddressInput
  status: ID
  payment: ComponentOrderPaymentInput
  created_by: ID
  updated_by: ID
}

input editOrderInput {
  user: ID
  comments: String
  books: [editComponentOrderOrderProductInput]
  totalInCents: Int
  shipping: editComponentOrderShippingAddressInput
  status: ID
  payment: editComponentOrderPaymentInput
  created_by: ID
  updated_by: ID
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Order
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

type Pages {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  path: String
  content: String
}

type PagesConnection {
  values: [Pages]
  groupBy: PagesGroupBy
  aggregate: PagesAggregator
}

type PagesAggregator {
  count: Int
  totalCount: Int
}

type PagesGroupBy {
  id: [PagesConnectionId]
  created_at: [PagesConnectionCreated_at]
  updated_at: [PagesConnectionUpdated_at]
  name: [PagesConnectionName]
  path: [PagesConnectionPath]
  content: [PagesConnectionContent]
}

type PagesConnectionId {
  key: ID
  connection: PagesConnection
}

type PagesConnectionCreated_at {
  key: DateTime
  connection: PagesConnection
}

type PagesConnectionUpdated_at {
  key: DateTime
  connection: PagesConnection
}

type PagesConnectionName {
  key: String
  connection: PagesConnection
}

type PagesConnectionPath {
  key: String
  connection: PagesConnection
}

type PagesConnectionContent {
  key: String
  connection: PagesConnection
}

input PageInput {
  name: String
  path: String
  content: String
  created_by: ID
  updated_by: ID
}

input editPageInput {
  name: String
  path: String
  content: String
  created_by: ID
  updated_by: ID
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Pages
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Pages
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Pages
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  content: String!
  cover: UploadFile
  excerpt: String
  user: AdminUser
  slug: String
  published_at: DateTime
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  title: [PostConnectionTitle]
  content: [PostConnectionContent]
  cover: [PostConnectionCover]
  excerpt: [PostConnectionExcerpt]
  user: [PostConnectionUser]
  slug: [PostConnectionSlug]
  published_at: [PostConnectionPublished_at]
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

type PostConnectionCover {
  key: ID
  connection: PostConnection
}

type PostConnectionExcerpt {
  key: String
  connection: PostConnection
}

type PostConnectionUser {
  key: ID
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionPublished_at {
  key: DateTime
  connection: PostConnection
}

input PostInput {
  title: String!
  content: String!
  cover: ID
  excerpt: String
  user: ID
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPostInput {
  title: String
  content: String
  cover: ID
  excerpt: String
  user: ID
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

type Rodape {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  logo: UploadFile
  links: [ComponentPageLinks]
  social: [ComponentPageSocial]
}

input RodapeInput {
  logo: ID
  links: [ComponentPageLinkInput]
  social: [ComponentPageSocialInput]
  created_by: ID
  updated_by: ID
}

input editRodapeInput {
  logo: ID
  links: [editComponentPageLinkInput]
  social: [editComponentPageSocialInput]
  created_by: ID
  updated_by: ID
}

input updateRodapeInput {
  data: editRodapeInput
}

type updateRodapePayload {
  rodape: Rodape
}

type deleteRodapePayload {
  rodape: Rodape
}

type ShippingServices {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  active: Boolean
}

type ShippingServicesConnection {
  values: [ShippingServices]
  groupBy: ShippingServicesGroupBy
  aggregate: ShippingServicesAggregator
}

type ShippingServicesAggregator {
  count: Int
  totalCount: Int
}

type ShippingServicesGroupBy {
  id: [ShippingServicesConnectionId]
  created_at: [ShippingServicesConnectionCreated_at]
  updated_at: [ShippingServicesConnectionUpdated_at]
  name: [ShippingServicesConnectionName]
  slug: [ShippingServicesConnectionSlug]
  active: [ShippingServicesConnectionActive]
}

type ShippingServicesConnectionId {
  key: ID
  connection: ShippingServicesConnection
}

type ShippingServicesConnectionCreated_at {
  key: DateTime
  connection: ShippingServicesConnection
}

type ShippingServicesConnectionUpdated_at {
  key: DateTime
  connection: ShippingServicesConnection
}

type ShippingServicesConnectionName {
  key: String
  connection: ShippingServicesConnection
}

type ShippingServicesConnectionSlug {
  key: String
  connection: ShippingServicesConnection
}

type ShippingServicesConnectionActive {
  key: Boolean
  connection: ShippingServicesConnection
}

input ShippingServiceInput {
  name: String
  slug: String
  active: Boolean
  created_by: ID
  updated_by: ID
}

input editShippingServiceInput {
  name: String
  slug: String
  active: Boolean
  created_by: ID
  updated_by: ID
}

input createShippingServiceInput {
  data: ShippingServiceInput
}

type createShippingServicePayload {
  shippingService: ShippingServices
}

input updateShippingServiceInput {
  where: InputID
  data: editShippingServiceInput
}

type updateShippingServicePayload {
  shippingService: ShippingServices
}

input deleteShippingServiceInput {
  where: InputID
}

type deleteShippingServicePayload {
  shippingService: ShippingServices
}

type Shipping {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  estimatedDelivery: String
  carrier: String
  price: Float
  hashId: String!
  service: ShippingServices
}

type ShippingConnection {
  values: [Shipping]
  groupBy: ShippingGroupBy
  aggregate: ShippingAggregator
}

type ShippingAggregator {
  count: Int
  totalCount: Int
  sum: ShippingAggregatorSum
  avg: ShippingAggregatorAvg
  min: ShippingAggregatorMin
  max: ShippingAggregatorMax
}

type ShippingAggregatorSum {
  price: Float
}

type ShippingAggregatorAvg {
  price: Float
}

type ShippingAggregatorMin {
  price: Float
}

type ShippingAggregatorMax {
  price: Float
}

type ShippingGroupBy {
  id: [ShippingConnectionId]
  created_at: [ShippingConnectionCreated_at]
  updated_at: [ShippingConnectionUpdated_at]
  estimatedDelivery: [ShippingConnectionEstimatedDelivery]
  carrier: [ShippingConnectionCarrier]
  price: [ShippingConnectionPrice]
  hashId: [ShippingConnectionHashId]
  service: [ShippingConnectionService]
}

type ShippingConnectionId {
  key: ID
  connection: ShippingConnection
}

type ShippingConnectionCreated_at {
  key: DateTime
  connection: ShippingConnection
}

type ShippingConnectionUpdated_at {
  key: DateTime
  connection: ShippingConnection
}

type ShippingConnectionEstimatedDelivery {
  key: String
  connection: ShippingConnection
}

type ShippingConnectionCarrier {
  key: String
  connection: ShippingConnection
}

type ShippingConnectionPrice {
  key: Float
  connection: ShippingConnection
}

type ShippingConnectionHashId {
  key: String
  connection: ShippingConnection
}

type ShippingConnectionService {
  key: ID
  connection: ShippingConnection
}

input ShippingInput {
  estimatedDelivery: String
  carrier: String
  price: Float
  hashId: String!
  service: ID
  created_by: ID
  updated_by: ID
}

input editShippingInput {
  estimatedDelivery: String
  carrier: String
  price: Float
  hashId: String
  service: ID
  created_by: ID
  updated_by: ID
}

input createShippingInput {
  data: ShippingInput
}

type createShippingPayload {
  shipping: Shipping
}

input updateShippingInput {
  where: InputID
  data: editShippingInput
}

type updateShippingPayload {
  shipping: Shipping
}

input deleteShippingInput {
  where: InputID
}

type deleteShippingPayload {
  shipping: Shipping
}

type Wishlist {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  books(sort: String, limit: Int, start: Int, where: JSON): [Livro!]!
}

type WishlistConnection {
  values: [Wishlist]
  groupBy: WishlistGroupBy
  aggregate: WishlistAggregator
}

type WishlistAggregator {
  count: Int
  totalCount: Int
}

type WishlistGroupBy {
  id: [WishlistConnectionId]
  created_at: [WishlistConnectionCreated_at]
  updated_at: [WishlistConnectionUpdated_at]
  user: [WishlistConnectionUser]
}

type WishlistConnectionId {
  key: ID
  connection: WishlistConnection
}

type WishlistConnectionCreated_at {
  key: DateTime
  connection: WishlistConnection
}

type WishlistConnectionUpdated_at {
  key: DateTime
  connection: WishlistConnection
}

type WishlistConnectionUser {
  key: ID
  connection: WishlistConnection
}

input WishlistInput {
  user: ID
  books: [ID]
  created_by: ID
  updated_by: ID
}

input editWishlistInput {
  user: ID
  books: [ID]
  created_by: ID
  updated_by: ID
}

input createWishlistInput {
  data: WishlistInput
}

type createWishlistPayload {
  wishlist: Wishlist
}

input updateWishlistInput {
  where: InputID
  data: editWishlistInput
}

type updateWishlistPayload {
  wishlist: Wishlist
}

input deleteWishlistInput {
  where: InputID
}

type deleteWishlistPayload {
  wishlist: Wishlist
}

type EmailDesignerEmailTemplate {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
}

input EmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

input editEmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  fullName: String
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  fullName: String
  wishlist: Wishlist
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  fullName: [UsersPermissionsUserConnectionFullName]
  wishlist: [UsersPermissionsUserConnectionWishlist]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFullName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionWishlist {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  fullName: String
  wishlist: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  fullName: String
  wishlist: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentCartasBooks {
  id: ID!
  books(sort: String, limit: Int, start: Int, where: JSON): [Livro!]!
}

input ComponentCartasBookInput {
  books: [ID]
}

input editComponentCartasBookInput {
  id: ID
  books: [ID]
}

type ComponentCartasDownloadsGroup {
  id: ID!
  title: String
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
}

input ComponentCartasDownloadsGroupInput {
  title: String
  files: [ID]
}

input editComponentCartasDownloadsGroupInput {
  id: ID
  title: String
  files: [ID]
}

type ComponentHomeBanner {
  id: ID!
  url: String
  image: UploadFile
}

input ComponentHomeBannerInput {
  url: String
  image: ID
}

input editComponentHomeBannerInput {
  id: ID
  url: String
  image: ID
}

type ComponentHomeProductGroup {
  id: ID!
  title: String!
  link: ComponentProductLink
  livros(sort: String, limit: Int, start: Int, where: JSON): [Livro!]!
}

input ComponentHomeProductGroupInput {
  title: String!
  livros: [ID]
  link: ComponentProductLinkInput
}

input editComponentHomeProductGroupInput {
  id: ID
  title: String
  livros: [ID]
  link: editComponentProductLinkInput
}

type ComponentMenuDropdown {
  id: ID!
  title: String
  links: [ComponentMenuLink]
}

input ComponentMenuDropdownInput {
  title: String
  links: [ComponentMenuLinkInput]
}

input editComponentMenuDropdownInput {
  id: ID
  title: String
  links: [editComponentMenuLinkInput]
}

type ComponentMenuLink {
  id: ID!
  name: String
  url: String
}

input ComponentMenuLinkInput {
  name: String
  url: String
}

input editComponentMenuLinkInput {
  id: ID
  name: String
  url: String
}

type ComponentMenuPage {
  id: ID!
  pages(sort: String, limit: Int, start: Int, where: JSON): [Pages!]!
}

input ComponentMenuPageInput {
  pages: [ID]
}

input editComponentMenuPageInput {
  id: ID
  pages: [ID]
}

type ComponentOrderOrderProduct {
  id: ID!
  book: Livro
  quantity: Int!
  price: Float
}

input ComponentOrderOrderProductInput {
  book: ID
  quantity: Int!
  price: Float
}

input editComponentOrderOrderProductInput {
  id: ID
  book: ID
  quantity: Int
  price: Float
}

type ComponentOrderPayment {
  id: ID!
  paymentId: String
  documentUrl: String
  total: Float
  brand: String
  lastFour: String
}

input ComponentOrderPaymentInput {
  paymentId: String
  documentUrl: String
  total: Float
  brand: String
  lastFour: String
}

input editComponentOrderPaymentInput {
  id: ID
  paymentId: String
  documentUrl: String
  total: Float
  brand: String
  lastFour: String
}

type ComponentOrderShippingAddress {
  id: ID!
  street: String
  zipCode: String
  city: String
  state: String
  neighborhood: String
  info: String
  carrier: String
  price: Float
  estimatedDelivery: String
  number: String
  trackingCode: String
  service: ShippingServices
}

input ComponentOrderShippingAddressInput {
  street: String
  zipCode: String
  city: String
  state: String
  neighborhood: String
  info: String
  carrier: String
  price: Float
  estimatedDelivery: String
  number: String
  trackingCode: String
  service: ID
}

input editComponentOrderShippingAddressInput {
  id: ID
  street: String
  zipCode: String
  city: String
  state: String
  neighborhood: String
  info: String
  carrier: String
  price: Float
  estimatedDelivery: String
  number: String
  trackingCode: String
  service: ID
}

type ComponentPageLinks {
  id: ID!
  title: String
}

input ComponentPageLinkInput {
  title: String
}

input editComponentPageLinkInput {
  id: ID
  title: String
}

type ComponentPageSocialLink {
  id: ID!
  url: String!
  logo: UploadFile
}

input ComponentPageSocialLinkInput {
  url: String!
  logo: ID
}

input editComponentPageSocialLinkInput {
  id: ID
  url: String
  logo: ID
}

enum ENUM_COMPONENTPAGESOCIAL_NAME {
  facebook
  instagram
  whatsapp
  email
  youtube
  telegram
}

type ComponentPageSocial {
  id: ID!
  name: ENUM_COMPONENTPAGESOCIAL_NAME!
  url: String!
}

input ComponentPageSocialInput {
  name: ENUM_COMPONENTPAGESOCIAL_NAME!
  url: String!
}

input editComponentPageSocialInput {
  id: ID
  name: ENUM_COMPONENTPAGESOCIAL_NAME
  url: String
}

type ComponentProductDimensions {
  id: ID!
  boxWidth: Int!
  boxHeight: Int!
  boxLength: Int
  boxWeight: Float!
}

input ComponentProductDimensionInput {
  boxWidth: Int!
  boxHeight: Int!
  boxLength: Int
  boxWeight: Float
}

input editComponentProductDimensionInput {
  id: ID
  boxWidth: Int
  boxHeight: Int
  boxLength: Int
  boxWeight: Float
}

type ComponentProductLink {
  id: ID!
  name: String
  url: String
}

input ComponentProductLinkInput {
  name: String
  url: String
}

input editComponentProductLinkInput {
  id: ID
  name: String
  url: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Author | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnectionId | AuthorConnectionCreated_at | AuthorConnectionUpdated_at | AuthorConnectionName | AuthorConnectionBook | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | BannerHero | BannerHeroConnection | BannerHeroAggregator | BannerHeroGroupBy | BannerHeroConnectionId | BannerHeroConnectionCreated_at | BannerHeroConnectionUpdated_at | BannerHeroConnectionImage | BannerHeroConnectionUrl | createBannerHeroPayload | updateBannerHeroPayload | deleteBannerHeroPayload | Cabecalho | updateCabecalhoPayload | deleteCabecalhoPayload | CartasDeCristo | updateCartasDeCristoPayload | deleteCartasDeCristoPayload | Categorias | CategoriasConnection | CategoriasAggregator | CategoriasGroupBy | CategoriasConnectionId | CategoriasConnectionCreated_at | CategoriasConnectionUpdated_at | CategoriasConnectionName | CategoriasConnectionSlug | createCategoriaPayload | updateCategoriaPayload | deleteCategoriaPayload | Contact | ContactConnection | ContactAggregator | ContactGroupBy | ContactConnectionId | ContactConnectionCreated_at | ContactConnectionUpdated_at | ContactConnectionName | ContactConnectionEmail | ContactConnectionSubject | ContactConnectionMessage | createContactPayload | updateContactPayload | deleteContactPayload | Disccount | DisccountConnection | DisccountAggregator | DisccountAggregatorSum | DisccountAggregatorAvg | DisccountAggregatorMin | DisccountAggregatorMax | DisccountGroupBy | DisccountConnectionId | DisccountConnectionCreated_at | DisccountConnectionUpdated_at | DisccountConnectionBook | DisccountConnectionPercentage | DisccountConnectionMinQuantity | createDisccountPayload | updateDisccountPayload | deleteDisccountPayload | Download | DownloadConnection | DownloadAggregator | DownloadAggregatorSum | DownloadAggregatorAvg | DownloadAggregatorMin | DownloadAggregatorMax | DownloadGroupBy | DownloadConnectionId | DownloadConnectionCreated_at | DownloadConnectionUpdated_at | DownloadConnectionName | DownloadConnectionTimes | createDownloadPayload | updateDownloadPayload | deleteDownloadPayload | Home | updateHomePayload | deleteHomePayload | Livro | LivroConnection | LivroAggregator | LivroAggregatorSum | LivroAggregatorAvg | LivroAggregatorMin | LivroAggregatorMax | LivroGroupBy | LivroConnectionId | LivroConnectionCreated_at | LivroConnectionUpdated_at | LivroConnectionName | LivroConnectionSlug | LivroConnectionDescription | LivroConnectionParticulars | LivroConnectionPrice | LivroConnectionStock | LivroConnectionDimensions | LivroConnectionActive | LivroConnectionPromoPrice | LivroConnectionSku | LivroConnectionGtin | LivroConnectionNcm | LivroConnectionSeoDescription | LivroConnectionWishlist | createLivroPayload | updateLivroPayload | deleteLivroPayload | Menu | MenuConnection | MenuAggregator | MenuGroupBy | MenuConnectionId | MenuConnectionCreated_at | MenuConnectionUpdated_at | MenuConnectionName | MenuConnectionSlug | createMenuPayload | updateMenuPayload | deleteMenuPayload | Newsletter | NewsletterConnection | NewsletterAggregator | NewsletterGroupBy | NewsletterConnectionId | NewsletterConnectionCreated_at | NewsletterConnectionUpdated_at | NewsletterConnectionEmail | NewsletterConnectionName | createNewsletterPayload | updateNewsletterPayload | deleteNewsletterPayload | OrderStatus | OrderStatusConnection | OrderStatusAggregator | OrderStatusGroupBy | OrderStatusConnectionId | OrderStatusConnectionCreated_at | OrderStatusConnectionUpdated_at | OrderStatusConnectionName | createOrderStatusPayload | updateOrderStatusPayload | deleteOrderStatusPayload | Order | OrderConnection | OrderAggregator | OrderAggregatorSum | OrderAggregatorAvg | OrderAggregatorMin | OrderAggregatorMax | OrderGroupBy | OrderConnectionId | OrderConnectionCreated_at | OrderConnectionUpdated_at | OrderConnectionUser | OrderConnectionComments | OrderConnectionTotalInCents | OrderConnectionShipping | OrderConnectionStatus | OrderConnectionPayment | createOrderPayload | updateOrderPayload | deleteOrderPayload | Pages | PagesConnection | PagesAggregator | PagesGroupBy | PagesConnectionId | PagesConnectionCreated_at | PagesConnectionUpdated_at | PagesConnectionName | PagesConnectionPath | PagesConnectionContent | createPagePayload | updatePagePayload | deletePagePayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionTitle | PostConnectionContent | PostConnectionCover | PostConnectionExcerpt | PostConnectionUser | PostConnectionSlug | PostConnectionPublished_at | createPostPayload | updatePostPayload | deletePostPayload | Rodape | updateRodapePayload | deleteRodapePayload | ShippingServices | ShippingServicesConnection | ShippingServicesAggregator | ShippingServicesGroupBy | ShippingServicesConnectionId | ShippingServicesConnectionCreated_at | ShippingServicesConnectionUpdated_at | ShippingServicesConnectionName | ShippingServicesConnectionSlug | ShippingServicesConnectionActive | createShippingServicePayload | updateShippingServicePayload | deleteShippingServicePayload | Shipping | ShippingConnection | ShippingAggregator | ShippingAggregatorSum | ShippingAggregatorAvg | ShippingAggregatorMin | ShippingAggregatorMax | ShippingGroupBy | ShippingConnectionId | ShippingConnectionCreated_at | ShippingConnectionUpdated_at | ShippingConnectionEstimatedDelivery | ShippingConnectionCarrier | ShippingConnectionPrice | ShippingConnectionHashId | ShippingConnectionService | createShippingPayload | updateShippingPayload | deleteShippingPayload | Wishlist | WishlistConnection | WishlistAggregator | WishlistGroupBy | WishlistConnectionId | WishlistConnectionCreated_at | WishlistConnectionUpdated_at | WishlistConnectionUser | createWishlistPayload | updateWishlistPayload | deleteWishlistPayload | EmailDesignerEmailTemplate | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFullName | UsersPermissionsUserConnectionWishlist | createUserPayload | updateUserPayload | deleteUserPayload | ComponentCartasBooks | ComponentCartasDownloadsGroup | ComponentHomeBanner | ComponentHomeProductGroup | ComponentMenuDropdown | ComponentMenuLink | ComponentMenuPage | ComponentOrderOrderProduct | ComponentOrderPayment | ComponentOrderShippingAddress | ComponentPageLinks | ComponentPageSocialLink | ComponentPageSocial | ComponentProductDimensions | ComponentProductLink

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  author(id: ID!, publicationState: PublicationState): Author
  authors(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Author!]!
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON): AuthorConnection
  bannerHero(id: ID!, publicationState: PublicationState): BannerHero
  bannerHeroes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BannerHero!]!
  bannerHeroesConnection(sort: String, limit: Int, start: Int, where: JSON): BannerHeroConnection
  cabecalho(publicationState: PublicationState): Cabecalho
  cartasDeCristo(publicationState: PublicationState): CartasDeCristo
  categoria(id: ID!, publicationState: PublicationState): Categorias
  categorias(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Categorias!]!
  categoriasConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriasConnection
  contact(id: ID!, publicationState: PublicationState): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Contact!]!
  contactsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactConnection
  disccount(id: ID!, publicationState: PublicationState): Disccount
  disccounts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Disccount!]!
  disccountsConnection(sort: String, limit: Int, start: Int, where: JSON): DisccountConnection
  download(id: ID!, publicationState: PublicationState): Download
  downloads(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Download!]!
  downloadsConnection(sort: String, limit: Int, start: Int, where: JSON): DownloadConnection
  home(publicationState: PublicationState): Home
  livro(id: ID!, publicationState: PublicationState): Livro
  livros(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Livro!]!
  livrosConnection(sort: String, limit: Int, start: Int, where: JSON): LivroConnection
  menu(id: ID!, publicationState: PublicationState): Menu
  menus(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Menu!]!
  menusConnection(sort: String, limit: Int, start: Int, where: JSON): MenuConnection
  newsletter(id: ID!, publicationState: PublicationState): Newsletter
  newsletters(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Newsletter!]!
  newslettersConnection(sort: String, limit: Int, start: Int, where: JSON): NewsletterConnection
  orderStatus(id: ID!, publicationState: PublicationState): OrderStatus
  orderStatuses(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [OrderStatus!]!
  orderStatusesConnection(sort: String, limit: Int, start: Int, where: JSON): OrderStatusConnection
  order(id: ID!, publicationState: PublicationState): Order
  orders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Order!]!
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection
  page(id: ID!, publicationState: PublicationState): Pages
  pages(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Pages!]!
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PagesConnection
  post(id: ID!, publicationState: PublicationState): Post
  posts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Post!]!
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  rodape(publicationState: PublicationState): Rodape
  shippingService(id: ID!, publicationState: PublicationState): ShippingServices
  shippingServices(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShippingServices!]!
  shippingServicesConnection(sort: String, limit: Int, start: Int, where: JSON): ShippingServicesConnection
  shipping(id: ID!, publicationState: PublicationState): Shipping
  shippings(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Shipping!]!
  shippingsConnection(sort: String, limit: Int, start: Int, where: JSON): ShippingConnection
  wishlist(id: ID!, publicationState: PublicationState): Wishlist
  wishlists(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Wishlist!]!
  wishlistsConnection(sort: String, limit: Int, start: Int, where: JSON): WishlistConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createBannerHero(input: createBannerHeroInput): createBannerHeroPayload
  updateBannerHero(input: updateBannerHeroInput): updateBannerHeroPayload
  deleteBannerHero(input: deleteBannerHeroInput): deleteBannerHeroPayload
  updateCabecalho(input: updateCabecalhoInput): updateCabecalhoPayload
  deleteCabecalho: deleteCabecalhoPayload
  updateCartasDeCristo(input: updateCartasDeCristoInput): updateCartasDeCristoPayload
  deleteCartasDeCristo: deleteCartasDeCristoPayload
  createCategoria(input: createCategoriaInput): createCategoriaPayload
  updateCategoria(input: updateCategoriaInput): updateCategoriaPayload
  deleteCategoria(input: deleteCategoriaInput): deleteCategoriaPayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  createDisccount(input: createDisccountInput): createDisccountPayload
  updateDisccount(input: updateDisccountInput): updateDisccountPayload
  deleteDisccount(input: deleteDisccountInput): deleteDisccountPayload
  createDownload(input: createDownloadInput): createDownloadPayload
  updateDownload(input: updateDownloadInput): updateDownloadPayload
  deleteDownload(input: deleteDownloadInput): deleteDownloadPayload
  updateHome(input: updateHomeInput): updateHomePayload
  deleteHome: deleteHomePayload
  createLivro(input: createLivroInput): createLivroPayload
  updateLivro(input: updateLivroInput): updateLivroPayload
  deleteLivro(input: deleteLivroInput): deleteLivroPayload
  createMenu(input: createMenuInput): createMenuPayload
  updateMenu(input: updateMenuInput): updateMenuPayload
  deleteMenu(input: deleteMenuInput): deleteMenuPayload
  createNewsletter(input: createNewsletterInput): createNewsletterPayload
  updateNewsletter(input: updateNewsletterInput): updateNewsletterPayload
  deleteNewsletter(input: deleteNewsletterInput): deleteNewsletterPayload
  createOrderStatus(input: createOrderStatusInput): createOrderStatusPayload
  updateOrderStatus(input: updateOrderStatusInput): updateOrderStatusPayload
  deleteOrderStatus(input: deleteOrderStatusInput): deleteOrderStatusPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  updateRodape(input: updateRodapeInput): updateRodapePayload
  deleteRodape: deleteRodapePayload
  createShippingService(input: createShippingServiceInput): createShippingServicePayload
  updateShippingService(input: updateShippingServiceInput): updateShippingServicePayload
  deleteShippingService(input: deleteShippingServiceInput): deleteShippingServicePayload
  createShipping(input: createShippingInput): createShippingPayload
  updateShipping(input: updateShippingInput): updateShippingPayload
  deleteShipping(input: deleteShippingInput): deleteShippingPayload
  createWishlist(input: createWishlistInput): createWishlistPayload
  updateWishlist(input: updateWishlistInput): updateWishlistPayload
  deleteWishlist(input: deleteWishlistInput): deleteWishlistPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
